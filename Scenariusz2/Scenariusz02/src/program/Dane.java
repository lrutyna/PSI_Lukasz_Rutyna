package program;

import java.util.Random;

public class Dane {
	int m=26;
	int n=35;
	
	//litery duze A-J
		static int [][]AJ = {{0,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1},
				 {1, 1, 1 ,1, 0 ,1 ,0 ,0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1 ,1 ,0 ,1 ,0, 0 ,0 ,1, 1 ,0 ,0, 0, 1 ,1 ,1, 1, 1 ,0},
				 {0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0},
				 {1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1 ,0, 0, 0, 1, 1, 0 ,0, 0, 1, 1, 0, 0, 0, 1 ,1 ,1 ,1, 1, 0},
				 {1, 1, 1, 1 ,1 ,1, 0 ,0 ,0 ,0, 1 ,0, 0, 0 ,0 ,1 ,1 ,1 ,1, 0, 1 ,0, 0 ,0, 0, 1 ,0 ,0 ,0 ,0, 1, 1, 1, 1, 1},
				 { 1, 1 ,1 ,1 ,1, 1, 0 ,0 ,0 ,0 ,1 ,0, 0 ,0 ,0 ,1, 1 ,1 ,1 ,0, 1 ,0 ,0, 0, 0 ,1, 0, 0 ,0 ,0 ,1, 0 ,0, 0 ,0},
				 {0, 1, 1 ,1 ,0 ,1 ,0 ,0 ,0, 1, 1 ,0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1 ,0 ,1, 1, 1, 0},
				 {1, 0 ,0 ,0 ,1 ,1 ,0, 0 ,0 ,1 ,1, 0, 0 ,0 ,1, 1 ,1 ,1, 1, 1 ,1 ,0, 0, 0 ,1, 1, 0 ,0 ,0 ,1 ,1, 0 ,0 ,0, 1},
				 {0, 1, 1, 1, 0, 0 ,0, 1, 0, 0, 0, 0 ,1, 0 ,0, 0, 0, 1, 0 ,0, 0 ,0 ,1 ,0 ,0, 0 ,0 ,1, 0 ,0, 0 ,1, 1, 1, 0},
				 {1, 1, 1, 1, 1 ,0 ,0, 0, 0, 1, 0, 0, 0, 0, 1, 0 ,0 ,0 ,0 ,1, 0, 0, 0, 0 ,1, 1, 0 ,0, 0 ,1 ,0, 1, 1 ,1, 0},
				};
		
		//odpowiedzi testowe dla liter A-J
		static int [][]ODP ={{1, 0 ,0, 0, 0, 0, 0 ,0 ,0, 0, 0, 0 ,0 ,0 ,0 ,0, 0 ,0, 0, 0 ,0 ,0, 0 ,0, 0, 0},
						{0, 1 ,0, 0, 0, 0, 0 ,0 ,0, 0, 0, 0 ,0 ,0 ,0 ,0, 0 ,0, 0, 0 ,0 ,0, 0 ,0, 0, 0},
						{0, 0 ,1, 0, 0, 0, 0 ,0 ,0, 0, 0, 0 ,0 ,0 ,0 ,0, 0 ,0, 0, 0 ,0 ,0, 0 ,0, 0, 0},
						{0, 0 ,0, 1, 0, 0, 0 ,0 ,0, 0, 0, 0 ,0 ,0 ,0 ,0, 0 ,0, 0, 0 ,0 ,0, 0 ,0, 0, 0},
						{0, 0 ,0, 0, 1, 0, 0 ,0 ,0, 0, 0, 0 ,0 ,0 ,0 ,0, 0 ,0, 0, 0 ,0 ,0, 0 ,0, 0, 0},
						{0, 0 ,0, 0, 0, 1, 0 ,0 ,0, 0, 0, 0 ,0 ,0 ,0 ,0, 0 ,0, 0, 0 ,0 ,0, 0 ,0, 0, 0},
						{0, 0 ,0, 0, 0, 0, 1 ,0 ,0, 0, 0, 0 ,0 ,0 ,0 ,0, 0 ,0, 0, 0 ,0 ,0, 0 ,0, 0, 0},
						{0, 0 ,0, 0, 0, 0, 0 ,1 ,0, 0, 0, 0 ,0 ,0 ,0 ,0, 0 ,0, 0, 0 ,0 ,0, 0 ,0, 0, 0},
						{0, 0 ,0, 0, 0, 0, 0 ,0 ,1, 0, 0, 0 ,0 ,0 ,0 ,0, 0 ,0, 0, 0 ,0 ,0, 0 ,0, 0, 0},
						{0, 0 ,0, 0, 0, 0, 0 ,0 ,0, 1, 0, 0 ,0 ,0 ,0 ,0, 0 ,0, 0, 0 ,0 ,0, 0 ,0, 0, 0},
				};
		
		static int [][]smallL = {
				//k:
                {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0},
                //l:
                {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0},
                //m:
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1},
                //n:
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1},
                //o:
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1},
                //b:
                {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1},
                //r:
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
                //s:
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1},
                //t:
                {0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1},
                //u:
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1,1,1}
				};
		
		//wagi
		double [][]w = new double[26][35];
		private Random generator = new Random();

		
		public Dane(){
		}
		
		public int[][] getAH() {
			return AJ;
		}

		public void setAH(int[][] aH) {
			AJ = aH;
		}

		public int[][] getODP() {
			return ODP;
		}

		public void setODP(int[][] oDP) {
			ODP = oDP;
		}

		public double[][] getW() {
			w=initW();
			return w;
		}


		//inicjalizacja wag
		public double[][] initW(){
			double w[][] = new double[m][n];
			for(int i=0; i < m; i++){
					for(int j=0; j < n; j++){
						w[i][j] = generator.nextDouble();
					}
			}
			return w;
		}

}
